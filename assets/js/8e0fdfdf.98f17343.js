"use strict";(self.webpackChunkprominence=self.webpackChunkprominence||[]).push([[157],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,b=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return n?r.createElement(b,s(s({ref:t},p),{},{components:n})):r.createElement(b,s({ref:t},p))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:o,s[1]=a;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8880:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:10},s="JSON",a={unversionedId:"jobs/generating-json",id:"jobs/generating-json",title:"JSON",description:"Jobs in PROMINENCE are defined using JSON. It is possible to create JSON job descriptions and submit them directory to the REST API,",source:"@site/docs/jobs/generating-json.md",sourceDirName:"jobs",slug:"/jobs/generating-json",permalink:"/docs/jobs/generating-json",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Labels",permalink:"/docs/jobs/labels"},next:{title:"Policies",permalink:"/docs/jobs/policies"}},l={},c=[{value:"Generating JSON with the CLI",id:"generating-json-with-the-cli",level:2},{value:"Multiple tasks in a single job",id:"multiple-tasks-in-a-single-job",level:2}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"json"},"JSON"),(0,o.kt)("p",null,"Jobs in PROMINENCE are defined using JSON. It is possible to create JSON job descriptions and submit them directory to the REST API,\nor to use the CLI to submit them. This allows users to create jobs which are more complex than are possible using the CLI or to\nprogrammatically create jobs."),(0,o.kt)("h2",{id:"generating-json-with-the-cli"},"Generating JSON with the CLI"),(0,o.kt)("p",null,"When prominence create is run with the ",(0,o.kt)("inlineCode",{parentName:"p"},"--dry-run")," option, the job will not be submitted but the JSON description of the job will be printed to standard output. For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ prominence create --dry-run --name test1 --cpus 4 --memory 8 --disk 20 busybox\n{\n  "resources": {\n    "memory": 8,\n    "cpus": 4,\n    "nodes": 1,\n    "disk": 20\n  },\n  "name": "test1",\n  "tasks": [\n    {\n      "image": "busybox",\n      "runtime": "singularity"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"If the JSON output is saved in a file it be submitted to PROMINENCE using the ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," command, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ prominence run <filename.json>\n")),(0,o.kt)("p",null,"The job description can also be a URL rather than a file, e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ prominence run <https://.../filename.json>\n")),(0,o.kt)("h2",{id:"multiple-tasks-in-a-single-job"},"Multiple tasks in a single job"),(0,o.kt)("p",null,"By default a job will run a single command inside a single container. However, it is possible to instead run multiple sequential tasks within a single job. Each task will have access to the same temporary storage, so transient files generated by one task are accessible by other tasks."),(0,o.kt)("p",null,"To run multiple tasks it is necessary to construct a JSON description of the job. For example, in this job there are two sequential tasks:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "resources": {\n    "memory": 1,\n    "cpus": 1,\n    "nodes": 1,\n    "disk": 10\n  },\n  "name": "multiple-tasks",\n  "tasks": [\n    {\n      "image": "centos:7",\n      "runtime": "singularity",\n      "cmd": "cat /etc/redhat-release"\n    },\n    {\n      "image": "centos:8",\n      "runtime": "singularity",\n      "cmd": "cat /etc/redhat-release"\n    }\n  ]\n}\n')),(0,o.kt)("p",null,"Use of JSON job descriptions is also necessary to run workflows, which we will come to next."))}u.isMDXComponent=!0}}]);